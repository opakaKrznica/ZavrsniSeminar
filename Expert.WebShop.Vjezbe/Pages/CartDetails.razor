@page "/shopping-cart"
@using models;
@inject ShoppingCartInMemory shoppingCartInMemory;
@inject HttpClient httpClient;
@inject NavigationManager navManager;
@inject IJSRuntime ijsRun;


<div class="container-md Width ">

    <nav class="navbar indigo d-md-flex justify-content-around sticky-top">

        <h3 class="mt-3 fs-2 ">Shopping Cart</h3>

        <div class="card-text bg-secondary  border-dark border-bottom border-end border-2
                     rounded-2 text-light text-center mt-2 m-2 p-2 pt-3  ">
            <h4>Total cash: @SumDiscount Eur</h4>
        </div>

        <button type="button" class="btn-secondary rounded-2 m-3 p-2 px-3 spec" @onclick="Checkout">
            B U Y
        </button>

        <button type="button" class="btn-secondary rounded-2 m-3 p-2 " @onclick="Return">
            Go Back
        </button>

    </nav>

    @{
        decimal sum = 0;
    }


    <section class="d-flex justify-content-center text-center grayBg">

        <ul class="list-unstyled  p-3">

            @foreach (var item in shoppingCartInMemory.selectedItems.OrderBy(x => x.ProductId))
            {
                <li>                  

                        <div class="card  text-center mt-3">

                            <div class="card-body">
                                <p class="card-title indigo text-light rounded-2  fs-1 ">
                                    @item.Product.ProductName
                                </p>
                                <br /><br />
                                <p class="card-text fs-4">
                                    Description: @item.Product.ProductDescription
                                </p>
                                <br />
                                <p class="card-text fs-4">
                                    Unit Price: @item.Product.ProductPrice Eur
                                </p>
                                <br />
                                <p class="card-text fs-4">
                                    Discount: @item.Product.Discount  %
                                </p>
                                <br />

                                <div>
                                    @{
                                        if (item.Product.Discount < 1)
                                        {
                                        var sumItem = Convert.ToDecimal(item.Product.ProductPrice)
                                            * Convert.ToDecimal(item.NumberOfItems);
                                            sum = sum + sumItem;
                                            <p class="card-text fs-4 fw-bold">
                                                Product price: @sumItem  Eur
                                            </p>
                                        }
                                        else
                                        {
                                        var discount = ((Convert.ToDecimal(item.Product.Discount) / 100)
                                        * Convert.ToDecimal(item.Product.ProductPrice));
                                            var result = Math
                                        .Round(Convert.ToDecimal(item.Product.ProductPrice) - discount, 2);
                                            result = result * item.NumberOfItems;
                                            sum = sum + result;

                                            <div class="card-text fs-5 pb-4 ">
                                                <h4 class=" fw-bold"> Discounted price: @result Eur</h4> (Unit price:
                                                @item.Product.ProductPrice * @item.NumberOfItems / Discount: @item.Product.Discount%)
                                            </div>
                                        }

                                    <div class="form-outline d-inline-flex align-items-center" style="width:40%;">
                                                <div>
                                            <button type="button" class="btn indigo  text-light btn-lg p-2 fs-4 px-md-4 spec" @onclick="()=>Decrement(item.ProductId)"> - </button>
                                                </div>
                                                <div>

                                                    <input class="form-control fs-4 text-center  ps-4" type="number" @bind-value="item.NumberOfItems" disabled="disabled">
                                                </div>
                                                <div>

                                                    <button type="button" class="btn indigo text-light btn-lg fs-md-4 p-2 px-md-4 spec" @onclick="()=>Increment(item.ProductId)"> + </button>

                                                </div>

                                            </div>
                                        
                                        <div>

                                            <button type="button" class="btn-danger btn-lg mt-3 p-2 space " @onclick="()=>DeleteProd(item.ProductId)">
                                                DELETE
                                            </button>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    
                </li>

            }
          
        </ul>
    </section>

</div>



@code {
    decimal SumDiscount = 0;

    protected override async Task OnInitializedAsync()
    {
        await TotalCash();
    }

    public async Task Checkout()
    {
        navManager.NavigateTo("/checkout");
    }

    public async Task Decrement(int prodId)
    {
        var decrease = shoppingCartInMemory.selectedItems.FirstOrDefault(x => x.ProductId == prodId);

        if (decrease.NumberOfItems > 1)
        {
            shoppingCartInMemory.selectedItems.Remove(decrease);
            decrease.NumberOfItems = decrease.NumberOfItems - 1;
            shoppingCartInMemory.selectedItems.Add(decrease);
            await TotalCash();
            StateHasChanged();
        }
    }

    public async Task Increment(int prodId)
    {
        var decrease = shoppingCartInMemory.selectedItems.FirstOrDefault(x => x.ProductId == prodId);
        shoppingCartInMemory.selectedItems.Remove(decrease);
        decrease.NumberOfItems = decrease.NumberOfItems + 1;
        shoppingCartInMemory.selectedItems.Add(decrease);
        await TotalCash();
        StateHasChanged();
    }

    public async Task TotalCash()
    {
          SumDiscount = 0;
        foreach (var item in shoppingCartInMemory.selectedItems.OrderBy(x => x.ProductId))
        {
            if (item.Product.Discount < 1)
            {
                SumDiscount = SumDiscount + Convert.ToDecimal(item.Product.ProductPrice) *
            Convert.ToDecimal(item.NumberOfItems);
            }
            else
            {
                var getPrice = Convert.ToDecimal(item.Product.ProductPrice);

                var discount = ((Convert.ToDecimal(item.Product.Discount) / 100) *
                Convert.ToDecimal(item.Product.ProductPrice));

                getPrice = Math.Round(Convert.ToDecimal(item.Product.ProductPrice) - discount, 2);



                SumDiscount = SumDiscount + (getPrice * item.NumberOfItems);
            }

        }
    }

    private async Task DeleteProd(int id)
    {      
        var confirm = await ijsRun.InvokeAsync<bool>("confirm", "You sure for changes?"); /*invokanje JS u C# , odlazi u IF*/

        if (confirm == true)
        {
        var delete = shoppingCartInMemory.selectedItems.FirstOrDefault(x => x.ProductId == id);

        shoppingCartInMemory.selectedItems.Remove(delete);
        await TotalCash();
        StateHasChanged();
        }
    }

    private async void Return()
    {
        navManager.NavigateTo("/");
    }
    
}

