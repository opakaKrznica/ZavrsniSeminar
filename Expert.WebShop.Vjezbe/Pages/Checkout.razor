@page "/checkout"
@using Expert.WebShop.Vjezbe.models;
@inject ShoppingCartInMemory shoppingCartInMemory
@inject HttpClient httpClient
@inject NavigationManager navManager


<div class="container-md Width ">

    <div class="indigo text-center p-3">
        <h3>Fill your personal details</h3>
    </div>

    <form @onsubmit="CheckoutItems">

        <div class="container bg-secondary bg-gradient text-light p-4 ">

            <div class="input-group mb-3">
                <span class="input-group-text" id="inputGroup-sizing-default">Full Name :</span>
                <input type="text" @bind-value="ImeOsobe" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
            </div>
                     
            <div class="input-group mb-3 ">
                <span class="input-group-text" id="inputGroup-sizing-default">Email :</span>
                <input type="text" @bind-value="Email" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
            </div>

                <div class="d-flex justify-content-between pt-3">
                    <button type="submit" class="btn indigo spec rounded-2 border-dark border-bottom border-end border-2 p-2">Check Out</button>

                    <button type="button" class="btn indigo rounded-2 border-dark border-bottom border-end border-2 p-2" @onclick="Return">
                        Go Back
                    </button>
                </div>
            </div>
        
    </form>
</div>

@code {
    public string Email;
    public string ImeOsobe;
    public decimal TotalAmount;
   
 
    public async Task CheckoutItems()
    {
        Guid orderId = Guid.NewGuid();

        foreach (var item in shoppingCartInMemory.selectedItems)
        {
            BuyItems cartItem = new BuyItems();

            cartItem.NumberOfItems = item.NumberOfItems;
            cartItem.OrderId = orderId;
            cartItem.ProductId = item.ProductId;
            cartItem.PricePerProduct = item.Product.ProductPrice;
            cartItem.OrderedByEmail = Email;
            cartItem.ProductDiscount = item.Product.Discount;
            cartItem.TotalAmmount = TotalAmount;


            if (cartItem.ProductDiscount > 0)
            {
                var discount = ((Convert.ToDouble(item.Product.Discount) / 100)
                        * Convert.ToDouble(item.Product.ProductPrice));
                var result = Math
                .Round(Convert.ToDouble(item.Product.ProductPrice) - discount, 2);
                result = result * item.NumberOfItems;
                cartItem.TotalAmmount = (decimal)result;
            }
            else
            {
                cartItem.TotalAmmount = (decimal)item.Product.ProductPrice * (decimal)item.NumberOfItems;
            }

            cartItem.IsDelivered = false;
            cartItem.IsPayed = false;

            var add = await httpClient.PostAsJsonAsync($"{Constants.BaseUrl}/ShoppingCards", cartItem);

            if (add.IsSuccessStatusCode)
            {
                navManager.NavigateTo("/Admin/orders-list");
            }
        }

    }

    private async void Return()
    {
        navManager.NavigateTo("/shopping-cart");
    }

}