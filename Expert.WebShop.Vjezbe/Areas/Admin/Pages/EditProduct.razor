
@page "/Admin/edit-product/{id:int}"
@using Expert.WebShop.Vjezbe.models;
@inject HttpClient httpClient;
@inject NavigationManager navManager;
@inject IJSRuntime ijsRun;

<div class="container-md Width ">

    <div class="indigo text-center p-3">
<h3>Edit Product</h3>
    </div>
<form @onsubmit="ProductEdit">
        <div class="container bg-secondary bg-gradient text-light p-4 ">
                    
        <div class="input-group mb-3">
            <span class="input-group-text" id="inputGroup-sizing-default">Category Group :</span>
                @* <input type="text" @bind-value="products.CategoryId" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">*@
                <select @onchange=@(SelectCategory) class="form-control" id="SelectCat">

                    <option value="">--Select--</option>
                    @foreach (var cat in categories)
                    {
                        if (cat.Id == products.CategoryId)
                        {
                            <option value="@cat.Id" selected>@cat.CategoryName</option>
                        }
                        else
                        {
                            <option value="@cat.Id">@cat.CategoryName</option>
                        }
                    }
                </select>
        </div>

        <div class="input-group mb-3">
            <span class="input-group-text" id="inputGroup-sizing-default">Name :</span>
            <input type="text" @bind-value="products.ProductName" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
        </div>

            <div class="input-group mb-3 ">
            <span class="input-group-text" id="inputGroup-sizing-default">Description :</span>
                <input type="text" @bind-value="products.ProductDescription" class="form-control"  aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
        </div>
           
        <div class="row g-2">
            <div class="col-sm-6">
                <div class="input-group mb-3">
                    <span class="input-group-text" id="inputGroup-sizing-default">Product Price EUR:</span>
                    <input type="number" @bind-value="products.ProductPrice" class="form-control " aria-label="Sizing example input" aria-describedby="inputGroup-sizing">
                    </div>
               </div>

            <div class="col-sm-6">
                <div class="input-group mb-3">
                    <span class="input-group-text " id="inputGroup-sizing-default">Product Discount %:</span>
                    <input type="number" @bind-value="products.Discount" class="form-control " aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
                </div>
            </div>

                           
            <div class="d-flex justify-content-between pt-3">
                <button type="submit" class="btn indigo rounded-2 border-dark border-bottom border-end border-2 p-2">Change</button>

                <button type="button" class="btn indigo rounded-2 border-dark border-bottom border-end border-2 p-2" @onclick="Return">
                Back to products
            </button>
            </div>
        </div>
    </div>
</form>
</div>



@code {
    [Parameter]
    public int Id { get; set; }

    private Products products = new Products();
    List<Category> categories = new List<Category>();

    private bool IsError = false;

    protected override async Task OnInitializedAsync()
    {
        var result = await httpClient.GetAsync($"{Constants.BaseUrl}/Products/{Id}");
        if (result.IsSuccessStatusCode)
        {
            products = await result.Content.ReadFromJsonAsync<Products>();

            categories = await CategoryList();
        }
    }

    private async Task ProductEdit()
    {
        var result = new HttpResponseMessage();

        var confirm = await ijsRun.InvokeAsync<bool>("confirm", "You sure for changes?"); /*invokanje JS u C# , odlazi u IF*/

        if (confirm == true)
        {
             result = await httpClient.PutAsJsonAsync($"{Constants.BaseUrl}/Products/{Id}", products);
        }

        if (result.IsSuccessStatusCode)
        {
            navManager.NavigateTo("/Admin/product-list");
        }
        else
        {
            IsError = true;
            StateHasChanged();
        }
    }

    private async Task SelectCategory(ChangeEventArgs e)
    {
        products.CategoryId = Convert.ToInt32(e.Value.ToString());
    }

    protected async Task<List<Category>> CategoryList()
    {
        var result = await httpClient.GetAsync($"{Constants.BaseUrl}/Categories");
        if (result.IsSuccessStatusCode)
        {
            categories = await result.Content.ReadFromJsonAsync<List<Category>>();

        }
        return categories;
    }

    private async void Return()
    {
        navManager.NavigateTo("Admin/product-list");
    }
}
